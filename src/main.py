import os
import sys
import subprocess
from dotenv import load_dotenv

def mostrar_menu():
    """Exibe o menu principal do sistema"""
    print("\n" + "=" * 60)
    print("üöÄ IMPORTADOR DE PLANILHAS PARA POSTGRESQL")
    print("=" * 60)
    print("Escolha uma op√ß√£o:")
    print()
    print("1. üìù Gerenciar Metadados de Tabelas")
    print("2. üìÑ Gerar Scripts SQL (CREATE + INSERT)")
    print("3. üó∫Ô∏è  Dados Geoespaciais")
    print("4. üõ†Ô∏è  Ferramentas Auxiliares")
    print("5. ‚ùì Ajuda")
    print("0. üö™ Sair")
    print("=" * 60)

def executar_metadados():
    """Executa o gerenciamento de metadados"""
    print("\nüìù GERENCIAR METADADOS DE TABELAS")
    print("-" * 40)
    print("Esta fun√ß√£o adiciona coment√°rios descritivos em tabelas e colunas")
    print("Suporte a pr√©-visualiza√ß√£o e confirma√ß√£o de mudan√ßas")
    print()
    
    try:
        subprocess.run([sys.executable, "src/carrega_metadados.py"], check=True)
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao executar gerenciamento de metadados")
    except FileNotFoundError:
        print("‚ùå Arquivo carrega_metadados.py n√£o encontrado")

def executar_gera_sql():
    """Executa a gera√ß√£o de scripts SQL"""
    print("\nüìÑ GERAR SCRIPTS SQL (CREATE + INSERT)")
    print("-" * 40)
    print("Esta fun√ß√£o converte planilhas em scripts SQL completos")
    print("Cria arquivos CREATE TABLE e INSERT prontos para execu√ß√£o")
    print()
    
    try:
        subprocess.run([sys.executable, "src/gera_create_inserts.py"], check=True)
    except subprocess.CalledProcessError:
        print("‚ùå Erro ao executar gera√ß√£o de scripts SQL")
    except FileNotFoundError:
        print("‚ùå Arquivo gera_create_inserts.py n√£o encontrado")

def mostrar_geoespaciais():
    """Mostra op√ß√µes de dados geoespaciais"""
    print("\nüó∫Ô∏è  DADOS GEOESPACIAIS")
    print("-" * 40)
    print("Escolha uma op√ß√£o:")
    print("1. Gerar Raster")
    print("2. Importar Raster Separado")
    print("3. Importar Raster Unido")
    print("0. Voltar ao menu principal")
    
    opcao = input("\nDigite sua escolha: ").strip()
    
    if opcao == "1":
        try:
            subprocess.run([sys.executable, "src/gerar_raster.py"], check=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå Erro ao executar gerar_raster.py")
    elif opcao == "2":
        try:
            subprocess.run([sys.executable, "src/importa_raster_separado.py"], check=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå Erro ao executar importa_raster_separado.py")
    elif opcao == "3":
        try:
            subprocess.run([sys.executable, "src/importa_raster_unidos.py"], check=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ùå Erro ao executar importa_raster_unidos.py")
    elif opcao == "0":
        return
    else:
        print("‚ùå Op√ß√£o inv√°lida")

def mostrar_ferramentas():
    """Mostra op√ß√µes de ferramentas auxiliares"""
    print("\nüõ†Ô∏è  FERRAMENTAS AUXILIARES")
    print("-" * 40)
    print("Escolha uma op√ß√£o:")
    print("1. Juntar Planilhas")
    print("2. Juntar Guias de Planilha")
    print("3. Transpor Planilha RH - Dados Superficiais")
    print("4. Transpor Planilha RH - Dados Subterr√¢neos")
    print("5. Executar Arquivo SQL")
    print("0. Voltar ao menu principal")
    
    opcao = input("\nDigite sua escolha: ").strip()
    
    scripts = {
        "1": "tools/junta_planilhas.py",
        "2": "tools/junta_guias_planilha.py",
        "3": "tools/transpor_planilha_RH_dados_superficiais.py",
        "4": "tools/transpor_planilha_RH_dados_subteraneo.py",
        "5": "src/executa_arquivo_sql.py"
    }
    
    if opcao in scripts:
        try:
            subprocess.run([sys.executable, scripts[opcao]], check=True)
        except (subprocess.CalledProcessError, FileNotFoundError):
            print(f"‚ùå Erro ao executar {scripts[opcao]}")
    elif opcao == "0":
        return
    else:
        print("‚ùå Op√ß√£o inv√°lida")

def mostrar_ajuda():
    """Mostra informa√ß√µes de ajuda"""
    print("\n‚ùì AJUDA")
    print("-" * 40)
    print("üìñ Documenta√ß√£o completa: README.md")
    print("üìã Exemplos de uso: examples/exemplo_uso.md")
    print("‚öôÔ∏è  Template de configura√ß√£o: examples/config_exemplo.env")
    print()
    print("üîß Comandos diretos:")
    print("‚Ä¢ poetry run python src/main.py")
    print("‚Ä¢ poetry run python src/carrega_metadados.py")
    print("‚Ä¢ poetry run python src/gera_create_inserts.py")
    print()
    print("üì¶ Scripts do Poetry:")
    print("‚Ä¢ poetry run importa-planilha")
    print("‚Ä¢ poetry run carrega-metadados")
    print("‚Ä¢ poetry run gera-create-inserts")
    print()
    print("üêõ Problemas comuns:")
    print("‚Ä¢ Verifique se o PostgreSQL est√° rodando")
    print("‚Ä¢ Confirme as credenciais no arquivo .env")
    print("‚Ä¢ Execute 'poetry install' se houver problemas de depend√™ncias")

def verificar_configuracao():
    """Verifica se a configura√ß√£o est√° correta"""
    load_dotenv()
    
    print("üîç Verificando configura√ß√£o...")
    
    # Verificar vari√°veis de ambiente
    variaveis = ['DB_HOST', 'DB_PORT', 'DB_NAME', 'DB_USER', 'DB_PASSWORD']
    faltando = []
    
    for var in variaveis:
        if not os.getenv(var):
            faltando.append(var)
    
    if faltando:
        print(f"‚ö†Ô∏è  Vari√°veis de ambiente faltando: {', '.join(faltando)}")
        print("üìù Crie um arquivo .env baseado em examples/config_exemplo.env")
        return False
    else:
        print("‚úÖ Configura√ß√£o do banco de dados OK")
        return True

def main():
    """Fun√ß√£o principal do sistema"""
    print("üöÄ Iniciando Importador de Planilhas PostgreSQL...")
    
    # Verificar configura√ß√£o
    if not verificar_configuracao():
        print("\n‚ùå Configure o arquivo .env antes de continuar")
        return
    
    while True:
        mostrar_menu()
        opcao = input("\nDigite sua escolha: ").strip()
        
        if opcao == "1":
            executar_metadados()
        elif opcao == "2":
            executar_gera_sql()
        elif opcao == "3":
            mostrar_geoespaciais()
        elif opcao == "4":
            mostrar_ferramentas()
        elif opcao == "5":
            mostrar_ajuda()
        elif opcao == "0":
            print("\nüëã Obrigado por usar o Importador de Planilhas PostgreSQL!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida. Tente novamente.")
        
        if opcao != "0":
            input("\nPressione Enter para continuar...")

if __name__ == "__main__":
    main()